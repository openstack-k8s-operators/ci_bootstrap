---
# Copyright Red Hat, Inc.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Load network environment definition from file
  ansible.builtin.include_tasks: load-input.yml

- name: Fetch underneath provider DNSs
  ansible.builtin.include_tasks: fetch-provider-dns.yml

- name: Check for os-net-info file
  ansible.builtin.stat:
    path: /etc/ci/env/os-net-info.yml
  register: _ci_bootstrap_os_net_info_stat

- name: slurp - Load os-net-info
  when: "_ci_bootstrap_os_net_info_stat.stat.exists"
  register: _ci_bootstrap_os_net_info_slurp
  ansible.builtin.slurp:
    src: /etc/ci/env/os-net-info.yml

- name: Set ci_bootstrap_os_net_info fact
  when: "_ci_bootstrap_os_net_info_stat.stat.exists"
  ansible.builtin.set_fact:
    ci_bootstrap_os_net_info: "{{ _ci_bootstrap_os_net_info_slurp['content'] | b64decode | from_yaml }}"
    cacheable: true

- name: Configure guest networking
  vars:
     mac_addr_map: "{{ ci_bootstrap_os_net_info.ci_bootstrap_os_mac_addr_map }}"
     networks: "{{ crc_ci_bootstrap_networking.networks }}"
     instances: "{{ crc_ci_bootstrap_networking.instances }}"
  ansible.builtin.include_tasks: configure-guest-networking.yml
  loop: "{{ crc_ci_bootstrap_networking.instances | dict2items }}"
  loop_control:
    label: "{{ instance_item.key }}"
    loop_var: instance_item

- name: Ensure CI directory on all hosts
  become: true
  delegate_to: "{{ item }}"
  ansible.builtin.file:
    path: "{{ cifmw_bootstrap_ci_infra_dir }}"
    state: directory
    mode: '0755'
  loop: "{{ hostvars.keys() }}"

- name: Save networking data to file for further usage
  vars:
    content:
      crc_ci_bootstrap_networks_out: "{{ crc_ci_bootstrap_networks_out | default({}) }}"
      crc_ci_bootstrap_provider_dns: "{{ crc_ci_bootstrap_provider_dns | default([]) }}"
  become: true
  delegate_to: "{{ item }}"
  ansible.builtin.copy:
    dest: "{{ cifmw_bootstrap_ci_infra_dir }}/networking-info.yml"
    content: "{{ content | to_nice_yaml }}"
    owner: root
    group: root
    mode: '0644'
  loop: "{{ hostvars.keys() }}"

- name: Generate the interfaces-info for the Networking mapper
  vars:
    content: >-
      {% set instances_data = {} -%}
      {% for inst_item in crc_ci_bootstrap_networks_out | default({}) | dict2items -%}
      {%   if inst_item.key not in instances_data -%}
      {%     set _ = instances_data.update({inst_item.key:[]}) -%}
      {%   endif -%}
      {%   for net_item in inst_item.value | default({}) | dict2items -%}
      {%     if 'parent_iface' not in net_item.value -%}
      {%       set mapped_net_data = {'mac': net_item.value.mac, 'network': net_item.key} -%}
      {%       set _ = instances_data.update({inst_item.key: instances_data[inst_item.key] + [mapped_net_data]}) -%}
      {%     endif -%}
      {%   endfor -%}
      {% endfor -%}
      {{ instances_data }}
  become: true
  ansible.builtin.copy:
    dest: "{{ cifmw_bootstrap_ci_infra_dir }}/interfaces-info.yml"
    content: "{{ content | to_nice_yaml }}"
    owner: root
    group: root
    mode: '0644'
